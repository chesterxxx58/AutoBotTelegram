from telethon.sync import TelegramClient
from telethon import events
import httpx
import time

api_id = 1234321 # Your api_id
api_hash = 'YOUR API_HASH'
openrouter_key = 'YOUR API KEY'
client = TelegramClient('my_bot_session', api_id, api_hash)

client.start()

async def ask_openrouter(prompt):
    headers = {
        "Authorization": f"Bearer {openrouter_key}",
        "HTTP-Referer": "https://you.example",
        "Content-Type": "application/json",
    }

    json = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [
            {"role": "system", # tell the model how to behave
             "content": "–¢—ã –æ–±—â–∞–µ—à—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –æ—Ç–≤–µ—á–∞—è –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π –æ—Ç–≤–µ—Ç—ã. –ù–µ –ø–∏—à–∏ –±–æ–ª—å—à–µ 6 —Å–ª–æ–≤"},
            {"role": "user", "content": prompt}
        ],
    }
    async with httpx.AsyncClient() as http:
        r = await http.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=json)

        print("–û—Ç–≤–µ—Ç –æ—Ç OpenRouter:")
        print(r.text)

        if r.status_code != 200:
            return f"–û—à–∏–±–∫–∞ OpenRouter: {r.status_code} ‚Äî {r.text}"

        try:
            return r.json()["choices"][0]["message"]["content"]
        except KeyError:
            return f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {r.text}"


async def send_welcome_message(event):
    user_id = event.sender_id

    try:
        user_entity = await client.get_entity(user_id)

        messages = await client.get_messages(user_entity, limit=1)

        if len(messages) == 0:
            # FIRST MESSAGE
            welcome_message = (
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥—Ä—É–≥! –ï—Å–ª–∏ —è –≤ —Å–µ—Ç–∏, —Ç–æ –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –æ—Ç–≤–µ—á—É. "
                "–ï—Å–ª–∏ –∂–µ —è –Ω–µ –≤ —Å–µ—Ç–∏, –Ω–µ –Ω—É–∂–Ω–æ —Å–ø–∞–º–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏ ‚Äî —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ 5-10 —á–∞—Å–æ–≤, "
                "–∞ –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á—É... –£–®–ï–õ –í –õ–ï–°."
            )
            await event.reply(welcome_message)
            print("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            # CHECKING THE TIME OF THE LAST CALL
            last_message_time = messages[0].date.timestamp()
            current_time = time.time()
            time_diff = current_time - last_message_time

            if time_diff > 36000:  # 10 HOURS
                reply_message = "–°–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç–æ–∫..."
                await event.reply(reply_message)
                print("‚è≥ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await event.reply("–£—Ö—Ç—ã, –Ω–æ–≤–µ–Ω—å–∫–∏–π?")
        return

@client.on(events.NewMessage(incoming=True))
async def handler(event):
    if event.is_private:
        user_message = event.raw_text
        print(f"üë§ {user_message}")

        await send_welcome_message(event)

        reply = await ask_openrouter(user_message)
        await event.reply(reply)
        print(f"ü§ñ {reply}")

# START CLIENT
client.run_until_disconnected()
